permission "request" "start run"
save "Settings" "set_directory"
save "segments.txt" "exists"
exists = save_data
seg = ["Origin/(A) System/Docks/Modules/main.ode","Origin/(A) System/Docks/Modules/applications.ode","Origin/(A) System/Docks/Modules/folders.ode","Origin/(A) System/Docks/Modules/time.ode","Origin/(A) System/Docks/Modules/battery.ode"]

save "segments.txt" "get"
log save_data
log "segments.txt".saveExists() 
log save_data.istype("Array")
log save_data.contains("/")

if "segments.txt".saveExists() and save_data.istype("Array") and save_data.contains("/") (
  seg = save_data
) else (
  save "segments.txt" "set" seg
)

save "Dock@System" "set_directory"
global "segments" seg
open = 0

window "responsive" true
window "hide"

window "y" screensize_y / -2 + 35
goto dock_x y
for "syscount" segments.len (
  import segments.[syscount] "ode" : c#dock_colour chx#15
  goto width / 2 + x + 15 y
)
dock_width = x_position - dock_x

// Parameter setup
dock_x = dock_width.round / -2
y = -100
height = 40
// Theme

if user."dock_colour" == null (
  network "update" "dock_colour" #060606
)
if user."icon_colour" == null (
  network "update" "icon_colour" #f3f3f3
)

file_loc = user_folder ++ "/Dock"

mainloop:
dock_colour = user."dock_colour"
icon_colour = user."icon_colour"
if dock_colour + icon_colour != tempcol (
  tempcol = dock_colour + icon_colour
  window "refresh_bg"
)
movefileloc file_loc
if mouse_down.not "canclick = True"
window "dimensions" screensize_x 70
window "y" screensize_y / -2 + 35
terminal "get windowpositions"
data = data + dock_width.round
if data != datasave (
  datasave = data
  data = "" + data.join(" ") + ""
  dock_x_target = dock_width / -2
  dock_y_target = 0
  left = data.contains(" 1,0 ") or data.contains(" 1,-1 ")
  right = data.contains(" -1,0 ") or data.contains(" -1,-1 ")
  if left and right or data.contains(" 0,0 ") (
    dock_x_target = dock_width / -2
    dock_y_target = -100
  ) else (
    if left "dock_x_target = window_width / -2"
    if right "dock_x_target = window_width / 2 - dock_width"
  )
  dock_x_target.round
)
if delta_time < 0.1 (
  rou = dock_x.round
  dock_x += dock_x_target.round - rou * delta_time * 7
  if rou != dock_x_target (
    window "refresh_bg"
  )
  y += dock_y_target - y.round * delta_time * 3
  if y.round != dock_y_target.round (
    window "refresh_bg"
  )
)
if y > -80 (
  goto dock_x y
  for "syscount" segments.len (
    import segments.[syscount] "ode" : c#dock_colour chx#15
    goto width / 2 + x + 15 y
  )
  dock_width = ( x_position - dock_x ).round
)
if open != 0 and mouse_down.not (
  terminal "system windows close" + open
  terminal "system windows add" + open
  open = 0
)
