import "window_tools" as "wt"
import as "glass" from "packages"

system_url = "https://web.rotur.dev/"

loaded_pages = {}
current_pages = []
summit = {
  tlds: (system_url ++ "tlds.json").httpGet().JsonParse(),
}

each key window.getKeys() (
  if window[key]["type"] == "function" (
    window[key] = () -> ()
  )
)

tabs_queue = []

class sandbox (
  def run(data) (
    local cache = {
      tabs,
      loaded_pages,
      my_uuid,
      my_path,
      my_location,
      current_pages,
      summit
    }
    tabs = null
    loaded_pages = null
    my_uuid = null
    my_path = null
    my_location = null
    current_pages = null
    summit = null
    
    run data "sandboxed"
    
    tabs @= cache.tabs
    loaded_pages @= cache.loaded_pages
    my_uuid = cache.my_uuid
    my_path = cache.my_path
    my_location = cache.my_location
    current_pages @= cache.current_pages
    summit @= cache.summit
  )
  
  def sanitiseOSL(OSL) (
    for i OSL.len (
      local line = OSL[i].trim()
      
      if line.startsWith("save ") and line.contains("set_directory") (
        line = ""
      )
    )
  )
)

permission "request" "file admin"

window "dimensions" 1000 600

def "redirect" "url" (
  summit.redirect_url = url
)

def "add_tab" "url" (
  local obj = {
    "title": "Loading",
    "position": 1,
    "icon": "refresh",
    "id": ouidNew(),
    "history": [url]
  }
  
  tabs_queue.append(obj)
)

def "opentab" "url" (
  add_tab url
)

def "draw_page" "url, page_type, tab_id" (
  current_pages.append(url)
  
  if url == null (
    return
  )
  
  if loaded_pages.contains(url) (
    local page = loaded_pages[url]
    local data = page.data
    
    onload = page.onload
    tab_info = null
    current_tab_name = {
      title: url.split("/")[1],
      icon: "network"
    }
    
    switch page_type (
      case "osl"
        try (
          sandbox.run(data)
          
          if tab_info != null (
            current_tab_name = tab_info
          )
        ) catch e (
          say "Page Error: " + url
          tab.delete(tab_id)
        )
        break
      case "png"
      case "jpg"
        image page.fetch_url 500
        current_tab_name = {
          "title": url.split("/").last(),
          "icon": "image" + page.fetch_url + "20"
        }
        break
      default
        goto 0 0
        inputs[url] = data
        textbox frame.width frame.height url
        break
    )
    if summit.redirect_url != "" (
      if summit.redirect_url.split("/").last().contains(".").not or summit.redirect_url.endsWith(".web") (
        summit.redirect_url = summit.redirect_url.append("/index.osl")
      )
      tabs[tab_id].url = summit.redirect_url
      tabs[tab_id].position ++
      tabs[tab_id].history = tabs[tab_id].history.append(summit.redirect_url)
      summit.redirect_url = ""
    )
    
    tabs[tab_id].page_len = page_len
    tabs[tab_id].icon = current_tab_name.icon
    tabs[tab_id].title = current_tab_name.title
    current_tab_name = {}
    page_len = 0
    loaded_pages[url].onload = false
  ) else (
    local fetch_url = ""
    if page_protocol == "web" (
      local parts = url.split("/")
      local current_tld = parts[1].split(".").last()
      // get the tld of the page
      fetch_url = "https://" ++ summit.tlds[current_tld] ++ url
      local data = fetch_url.getAsync()
    ) else if page_protocol == "local" (
      local data = open(url)
    )
    if data != "Loading" (
      loaded_pages[url] = {
        data: data.split("\n"),
        onload: true,
        vars: {},
        fetch_url
      }
    )
  )
)

def "page_frame" "left, top, right, bottom, url" (

  local tab_id = url
  
  local idx = tabs.getKeys("id").index(url)
  
  local tab = tabs[idx]
  
  local url = tab.history[tab.position]
  
  page_protocol = url.split(":")[1]

  
  local w = (right - left).abs()
  local h = (top - bottom).abs()
  
  local x = left + (w / 2)
  local y = bottom + (h / 2)
  goto x y
  c window_colour
  square w h 10

  frame left top right bottom tabs[idx].page_len tabs[idx].id (
    local page_type = "text"
 
    if url.startsWith("local://") (
      local url = url.trim(9,-1)
      file "open" url "onlyaccess"
      if [".owf", ".osl"].contains(fileGet(1)) (
        local page_type = "osl"
      )
    )
    if url.startsWith("web://") (
      if url.endsWith("/") (
        local url = url.trim(1,-2)
      )
      local url = url.trim(7,-1)
      if url.endsWith(".osl") (
        local page_type = "osl"
      ) else if url.contains("/").not() (
        local page_type = "osl"
        local url ++= "/index.osl"
      ) else (
        local page_type = url.split("/").last().split(".").last()
      )
    )
    scroll_y = frame.scroll
    draw_page url page_type idx
    scroll_y = 0
  )
)

tabs = []

if passed_data != "" (
  add_tab "local://" ++ passed_data
) else (
  add_tab "web://search.web"
)

current_tabs = [tabs[1].id]

sidebar = {
  width: 300,
  x: -300,
  target_x: 0,
  icons: [
    {
      icn:  "w 3 cutcircle -2 2 8 0 180 w 3.5 line 4 -4 12 -12",
      func: def() -> (
        input "focus" "main"
      )
    },
    {
      icn:  "left-arrow",
      func: def() -> (
      
      )
    },
    {
      icn:  "right-arrow",
      func: def() -> (
      
      )
    }
  ],
  handleSize: def() -> (
    sidebar.x += sidebar.target_x - sidebar.x / 7
    return sidebar
  ),
}

sidebar.main = def() -> (
  sidebar = sidebar.handleSize()
  // sidebar.handleSize()
  
  if mouse_x < window.left + 30 and onclick (
    sidebar.target_x = 0
  )
  
  window "set_dragbox" [[2,2,100 + self.x,0],[2,2,sidebar.width + self.x - 40,-40]]

  sidebar.left = window.left + sidebar.x
  
  sidebar.edge = sidebar.left + sidebar.width
  
  frame sidebar.left window.top sidebar.edge window.bottom (
    goto 0 0
    square frame.width - 20 frame.height - 20 10 : c#window_colour
    
    c txtc
    loc -2 2 -25 -25
    icon "left" 0.7
    if onclick (
      sidebar.target_x = -300
    )
    
    goto 0 frame.top - 65
    c prim
    square frame.width - 40 30 10
    input frame.width - 50 25 "main" "Enter A URL"
    if "enter".onKeyDown() and selected_input == "main" (
      if input_main.contains("://").not() (
        input_main.prepend("web://")
      )
      add_tab input_main
      input_main = ""
    )
    
    if sidebar.x > -280 (
      c txtc
      loc 2 2 25 -25
      each i sidebar.icons (
        icon i.icn 0.7
        if onclick (
          i.func()
        )
        change_x 30
      )
    
      c seco
      frame frame.left + 10 frame.top - 90 frame.right - 10 frame.bottom tabs.len * 45 (
        goto 0 frame.top + frame.scroll - 25
        each this.i this.tab tabs (
          set_x 0
          square frame.width 40 0 0 1
          if current_tabs.contains(tab.id) (
            square frame.width - 20 30 15 : c#seco
            square frame.width - 20 30 10 : c#window_colour
          )
          if mouse_touching (
            square frame.width - 20 30 15 : c#global_accent
            square frame.width - 20 30 10 : c#window_colour
            if onclick (
              if current_tabs.contains(tab.id) (
                current_tabs.delete(tab.id)
              ) else (
                current_tabs.append(tab.id)
              )
            )
          )
          set_x frame.left + 25
          square 30 30 10 : c#prim
          icon tab.icon 0.7 : c#txtc
          text tab.title.trimText(frame.width - 70 / 9) 9 : c#txtc chx#30
          set_x frame.right - 25
          icon "close" 0.5
          if onclick (
            tabs.delete(i)
          )
          change_y -45
        )
      )
      goto 0 window.top
    )
  )
  
  return sidebar
)

mainloop:
wt:load_theme

each this.page loaded_pages.getKeys() (
  if current_pages.contains(page).not() (
    loaded_pages.delete(page)
  )
)

if file_dropped != 0 (
  add_tab "local://" ++ file_dropped
  file_dropped = 0
)

current_pages = []

glass:frame window.left window.top window.right window.bottom; frame "clear"

sidebar.main()

local left = sidebar.edge + 10
local right = window.right - 10
local w = right - left
local tab_w = w / current_tabs.len
local right = left + tab_w

for i tabs_queue.len (
  tabs.append(tabs_queue.shift())
)
current_tabs = [tabs.last().id]

each this.tab current_tabs (
  page_frame left window.top - 10 right window.bottom + 10 tab
  local left += tab_w
  local right += tab_w
)

import "win-buttons"