import "window_tools" as "wt"
import as "glass" from "packages"

system_url = "https://raw.githubusercontent.com/Mistium/owtp/main/"

loaded_pages = {}
current_pages = []
summit = {}

permission "request" "file admin"

window "dimensions" 1000 600

def "redirect" "url" (
  summit.redirect_url = url
)

def "draw_page" "url, page_type, tab_id" (
  current_pages.append(url)
  
  if loaded_pages.contains(url) (
    onload = loaded_pages[url].onload
    local data = loaded_pages[url].data
    if page_type == "osl" (
      run data "sandboxed"
    ) else if page_type == "text" (
      goto 0 0
      inputs[url] = data
      textbox frame.width frame.height url
    )
    if summit.redirect_url != "" (
      if summit.redirect_url.split("/").last().contains(".").not or summit.redirect_url.endsWith(".web") (
        summit.redirect_url = summit.redirect_url.append("/index.osl")
      )
      tabs[tab_id].url = summit.redirect_url
      tabs[tab_id].position ++
      tabs[tab_id].history = tabs[tab_id].history.append(summit.redirect_url)
      summit.redirect_url = ""
    )
    tabs[tab_id].page_len = page_len
    tabs[tab_id].icon = current_tab_name.icon
    tabs[tab_id].title = current_tab_name.title
    current_tab_name = {}
    page_len = 0
    loaded_pages[url].onload = false
  ) else (
    if page_protocol == "owtp" (
      local data = (system_url ++ url).getAsync()
    ) else if page_protocol == "local" (
      local data = open(url)
    )
    if data != "Loading" (
      loaded_pages[url] = {
        "data": data.split("\n"),
        "onload": true
      }
    )
  )
)

def "page_frame" "left, top, right, bottom, url" (

  local tab_id = url
  
  local idx = tabs.getKeys("id").index(url)
  
  local tab = tabs[idx]
  
  local url = tab.history[tab.position]
  
  page_protocol = url.split(":")[1]

  
  local w = (right - left).abs()
  local h = (top - bottom).abs()
  
  local x = left + (w / 2)
  local y = bottom + (h / 2)
  goto x y
  c window_colour
  square w h 10
  
  frame left top right bottom tabs[idx].page_len tabs[idx].id (
    local page_type = "text"
 
    if url.startsWith("local://") (
      local url = url.trim(9,-1)
      file "open" url "onlyaccess"
      if [".owf", ".osl"].contains(fileGet(1)) (
        local page_type = "osl"
      )
    )
    if url.startsWith("owtp://") (
      if url.endsWith("/") (
        local url = url.trim(1,-2)
      )
      local url = url.trim(8,-1)
      if url.endsWith(".osl") (
        local page_type = "osl"
      )
      if url.endsWith(".web") (
        local page_type = "osl"
        local url ++= "/index.osl"
      )
    )
    scroll_y = frame.scroll
    draw_page url page_type idx
    scroll_y = 0
  )
)

def "add_tab" "url" (
  local obj = {
    "title": "Loading",
    "position": 1,
    "icon": "refresh",
    "id": ouidNew(),
    "history": [url]
  }
  
  tabs.append(obj)
  
  current_tabs = [obj.id]
)

tabs = []

if passed_data != "" (
  add_tab "local://" ++ passed_data
) else (
  add_tab "owtp://search.web"
)

current_tabs = [tabs[1].id]

sidebar = {
  "width":300,
  "x":-300,
  "target_x":0,
  "icons":[
    {
      "icn":"w 3 cutcircle -2 2 8 0 180 w 3.5 line 4 -4 12 -12",
      "func":"search"
    },
    {
      "icn":"left-arrow",
      "func":"back"
    },
    {
      "icn":"right-arrow",
      "func":"forward"
    }
  ],
  "handleSize": def() -> (
    sidebar.x += sidebar.target_x - sidebar.x / 7
    return sidebar
  ),
}

sidebar.main = def() -> (
  sidebar = sidebar.handleSize()
  // sidebar.handleSize()
  
  if mouse_x < window.left + 30 and onclick (
    sidebar.target_x = 0
  )

  sidebar.left = window.left + sidebar.x
  
  sidebar.edge = sidebar.left + sidebar.width
  
  frame sidebar.left window.top sidebar.edge window.bottom (
    goto 0 0
    square frame.width - 20 frame.height - 20 10 : c#window_colour
    
    c txtc
    loc -2 2 -25 -25
    icon "left" 0.7
    if onclick (
      sidebar.target_x = -300
    )
    
    goto 0 frame.top - 65
    c prim
    square frame.width - 40 30 10
    input frame.width - 50 25 "main" "Enter A URL"
    if "enter".onpress and selected_input == "main" (
      add_tab input_main
      input_main = ""
    )
    
    if sidebar.x > -280 (
      c txtc
      loc 2 2 25 -25
      each i sidebar.icons (
        icon i.icn 0.7
        change_x 30
      )
    
      c seco
      frame frame.left + 10 frame.top - 90 frame.right - 10 frame.bottom tabs.len * 45 (
        goto 0 frame.top + frame.scroll - 25
        each this.i this.tab tabs (
          set_x 0
          square frame.width 40 0 0 1
          if current_tabs.contains(tab.id) (
            square frame.width - 20 30 15 : c#seco
            square frame.width - 20 30 10 : c#window_colour
          )
          if mouse_touching (
            square frame.width - 20 30 15 : c#global_accent
            square frame.width - 20 30 10 : c#window_colour
            if onclick (
              if current_tabs.contains(tab.id) (
                current_tabs.delete(tab.id)
              ) else (
                current_tabs.append(tab.id)
              )
            )
          )
          set_x frame.left + 20
          icon tab.icon 0.7 : c#txtc
          text tab.title.trimText(frame.width - 70 / 9) 9 : chx#20
          set_x frame.right - 25
          icon "close" 0.6
          if onclick (
            tabs.delete(i)
          )
          change_y -45
        )
      )
      goto 0 window.top
    )
  )
  
  return sidebar
)

mainloop:
wt:load_theme

each this.page loaded_pages.getKeys() (
  if current_pages.contains(page).not() (
    loaded_pages.delete(page)
  )
)

if file_dropped != 0 (
  add_tab "local://" ++ file_dropped
  file_dropped = 0
)

current_pages = []

glass:frame window.left window.top window.right window.bottom; frame "clear"

sidebar.main()

local left = sidebar.edge + 10
local right = window.right - 10
local w = right - left
local tab_w = w / current_tabs.len
local right = left + tab_w

each this.tab current_tabs (
  page_frame left window.top - 10 right window.bottom + 10 tab
  local left += tab_w
  local right += tab_w
)

import "win-buttons"
